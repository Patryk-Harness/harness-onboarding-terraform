# Everything defined here is applied to all AppCI's

technology_area: CustomerTechnology


# Common artifact configuration
artifacts:
  docker_artifactory:
    server: artifactory.ual.com/v-docker
    repository: v-docker
    connector: Jfrog-Artifactory

    # Automatically create a trigger to deploy to dev when a new artifact is created
    auto_trigger: true
    trigger: 
      type: workflow
      name: ecs-cd-workflow
      env: 
        name: dev
        infra: dev

# Common manifest configuration
manifests:
  ecs:
    connector: GitHubEnterprise_cfn_Forked
    task_definition_path: ecs-deploy/DotNet/TaskDefinition.json
    service_definition_path: ecs-deploy/DotNet/ServiceDefinition.json
    branch: master

services:
  ecs:
    variables:
      FluentBit: 
        value: ${app.defaults.FluentBit}
        type: text
      LoadbalancerPriority: 
        value: ${service.description.split('-')[1]}
        type: text
      TargetValue: 
        value: ${app.defaults.TargetValue}
        type: text
      TargetGroupARN: 
        value: ${cloudformation.TargetGroupARN}
        type: text
      MinCapacity: 
        value: ${app.defaults.MinCapacity}
        type: text
      Memory: 
        value: ${app.defaults.Memory}
        type: text
      MaxCapacity: 
        value: ${app.defaults.MaxCapacity}
        type: text
      ESPort: 
        value: ${app.defaults.ESPort}
        type: text
      Env: 
        value: ${env.name}
        type: text
      DDVersion: 
        value: ${app.defaults.DDVersion}
        type: text
      DDImage: 
        value: ${app.defaults.DDImage}
        type: text
      DDContainerPort: 
        value: ${app.defaults.DDContainerPort}
        type: text
      DDAppCI: 
        value: ${service.description.split('-')[0].toLowerCase()}
        type: text
      DDAPMIgnoreResources: 
        value: ${app.defaults.DDAPMIgnoreResources}
        type: text
      DDAPMEnabled: 
        value: ${app.defaults.DDAPMEnabled}
        type: text
      DDAPIKey: 
        value: ${environmentVariable.DDAPIKey}
        type: text
      CPU: 
        value: ${app.defaults.CPU}
        type: text
      AppName: 
        value: ${app.defaults.AppName}
        type: text
      ApplicationCI: 
        value: ${app.defaults.ApplicationCI}
        type: text
      AppContainerPort: 
        value: ${app.defaults.AppContainerPort}
        type: text

workflows: 
  ecs-cd-workflow: {}

provisioners:
  singlestack:
    type: cloudformation
    branch: master
    connector: GitHubEnterprise_cfn_Forked
    path: infra-stack/ecs-appci-role.yml
    variables:
      APPContainerPort: text
      APPNAME: text
      AlbName: text
      ApplicationContactDL: text
      CertificateArn: text
      ClusterAppCI: text
      DataClassification: text
      DataRetentionPeriod: text
      ECSClusterName: text
      Environment: text
      GSLBURL: text
      HealthCheckPath: text
      HostedZoneId: text
      HostedZoneName: text
      InternalExternal: text
      LoadBalancerPort: text
      LoadBalancerPriority: text
      MaintenanceWindow: text
      NewClusterAlb: text
      NewPolicyRole: text
      NodeInstanceRole: text
      RecordName: text
      RegulatoryControls: text
      RiskDataClass: text
      SLALevel: text
      Subnets: text
      UpperCaseClusterAppCI: text
      VPC: text
